{"version":3,"sources":["components/slider/index.js","components/bar/index.js","dataprocess/data/salaries-proccesed.csv","App.js","serviceWorker.js","index.js"],"names":["Slider","props","min","max","step","defaultValue","variable","ordinalScale","updateChart","ref","useRef","useState","selectedValue","setSelectedValue","useEffect","width","margin","data","d3","map","d","key","value","svg","current","append","attr","xBand","domain","range","padding","xLinear","bandwidth","y","nice","bars","selectAll","barsEnter","enter","call","g","tickValues","tickFormat","select","remove","d3Slider","ticks","default","on","draw","selected","merge","Fragment","id","Bar","x","height","group","crossfilter","dimension","reduce","p","v","count","sum","avg","style","top","Infinity","Math","round","sort","a","b","indexBy","enableGridX","enableGridY","keys","colors","borderWidth","borderColor","enableLabel","labelFormat","labelSkipWidth","tooltipFormat","isInteractive","animate","layout","englishLevels","educationTitles","App","loading","setLoading","salaryMean","setSalaryMean","numberOfPeople","setNumberOfPeople","salaryData","setSalaryData","filteredData","setFilteredData","React","exchangeRate","experience","filters","setFilters","name","prevState","salaryFile","currency","replace","position","workmode","then","csv","console","log","catch","error","newSalaryData","filter","length","className","AppBar","Toolbar","Typography","variant","Box","Grid","container","spacing","item","xs","md","right","bottom","left","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f679735e.chunk.js","sourcesContent":["import React, { useState,useEffect, useRef }  from 'react';\nimport * as d3 from 'd3';\nimport * as d3Slider from 'd3-simple-slider';\nimport './styles.css';\n\n\n\nconst Slider = props => {\n\n    const {min,max,step,defaultValue,variable,ordinalScale,updateChart} = props;\n\n    const ref = useRef(null);\n    const [selectedValue, setSelectedValue] = useState(defaultValue);\n\n\n    useEffect(\n        () => {\n\n                // New York Times\n                const width = 320;\n                const height = 120;\n                const margin = { top: 20, right: 30, bottom: 50, left: 30 };\n                \n                const data = d3.range(min, max+1,step).map(d => ({\n                    key: d,\n                    value: d,\n                }));\n\n                const svg = d3.select(ref.current)\n                    .append('svg')\n                    .attr('width', width)\n                    .attr('height', height);\n\n                const padding = 0.1;\n\n                const xBand = d3\n                    .scaleBand()\n                    .domain(data.map(d => d.key))\n                    .range([margin.left, width - margin.right])\n                    .padding(padding);\n\n                const xLinear = d3\n                    .scaleLinear()\n                    .domain([\n                        d3.min(data, d => d.key),\n                        d3.max(data, d => d.key),\n                    ])\n                    .range([\n                        margin.left + xBand.bandwidth() / 2 + xBand.step() * padding - 0.5,\n                        width -\n                        margin.right -\n                        xBand.bandwidth() / 2 -\n                        xBand.step() * padding -\n                        0.5,\n                    ]);\n\n                const y = d3\n                    .scaleLinear()\n                    .domain([0, d3.max(data, d => d.value)])\n                    .nice()\n                    .range([height - margin.bottom, margin.top]);\n\n                const yAxis = g =>g.attr('transform', `translate(${width - margin.right},0)`)\n                            .call(d3.axisRight(y)\n                                .tickValues([1e4])\n                                .tickFormat(d3.format('($.2s'))\n                            )\n                            .call(g => g.select('.domain').remove());\n\n                const slider = g =>\n                g.attr('transform', `translate(0,${height - margin.bottom})`).call(\n                    d3Slider\n                    .sliderBottom(xLinear)\n                    .step(step)\n                    .ticks(4)\n                    .default(defaultValue)\n                    .on('onchange', value => draw(value))\n                );\n\n                const bars = svg\n                    .append('g')\n                    .selectAll('rect')\n                    .data(data);\n\n                const barsEnter = bars\n                    .enter()\n                    .append('rect')\n                    .attr('x', d => xBand(d.key))\n                    .attr('y', d => y(d.value))\n                    .attr('height', d => y(0) - y(d.value))\n                    .attr('width', xBand.bandwidth());\n\n                svg.append('g').call(yAxis);\n                svg.append('g').call(slider);\n                \n                const draw = selected => {\n                    barsEnter\n                        .merge(bars)\n                        .attr('fill', d => (d.key === selected ? '#2196F3' : '#e0e0e0'));\n\n                    setSelectedValue(ordinalScale?ordinalScale[selected]:selected)\n                 \n                    updateChart(variable,selected);\n\n                };\n                draw(defaultValue);\n        },\n        []\n    );\n\n    return (\n        <React.Fragment>\n        <p>{variable===\"exchangeRate\"?d3.format(\"($,.0f\")(selectedValue):selectedValue}</p>\n        <div id=\"slider-new-york-times\" ref={ref}></div>\n\n        </React.Fragment>\n\n    )\n\n}\n\nexport default Slider;","import React from 'react';\nimport * as d3 from 'd3';\nimport * as crossfilter from 'crossfilter2/crossfilter';\nimport { ResponsiveBar } from '@nivo/bar';\n\nconst Bar = (props) => {\n  const { x, y, margin, data, height } = props;\n  const cx = crossfilter(data);\n  const dimension = cx.dimension((d) => d[x]);\n  const group = dimension.group().reduce(\n    /* callback for when data is added to the current filter results */\n    (p, v) => {\n      ++p.count;\n      p.sum += v[y];\n      p.avg = p.sum / p.count;\n      return p;\n    },\n    /* callback for when data is removed from the current filter results */\n    (p, v) => {\n      --p.count;\n      p.sum += v[y];\n      p.avg = p.sum / p.count;\n      return p;\n    },\n    /* initialize p */\n    () => ({\n      count: 0,\n      sum: 0,\n      avg: 0,\n    })\n  );\n\n  return (\n    <div style={{ height: height }}>\n      <ResponsiveBar\n        margin={margin}\n        padding={0.2}\n        data={group\n          .top(Infinity)\n          .map((d) => {\n            d.avg = Math.round(d.value.avg * 1000) / 1000;\n            return d;\n          })\n          .sort((a, b) => d3.ascending(a.avg, b.avg))}\n        indexBy=\"key\"\n        enableGridX={true}\n        enableGridY={true}\n        keys={['avg']}\n        colors={['#F1E15B']}\n        borderWidth={3}\n        borderColor=\"#000\"\n        enableLabel={true}\n        labelFormat={(v) => `${d3.format('($,.1f')(v)}`}\n        labelSkipWidth={20}\n        tooltipFormat={(v) => `${d3.format('($,.1f')(v)}`}\n        isInteractive={true}\n        animate={false}\n        layout=\"horizontal\"\n      />\n    </div>\n  );\n};\nexport default Bar;\n","export default __webpack_public_path__ + \"static/media/salaries-proccesed.fcc07f86.csv\";","import React, { useState, useEffect } from 'react';\nimport Slider from './components/slider';\nimport Bar from './components/bar';\nimport { Box, Grid, AppBar, Toolbar, Typography } from '@material-ui/core';\nimport * as d3 from 'd3';\n\nimport './App.css';\nimport salaryFile from './dataprocess/data/salaries-proccesed.csv';\n//let salaryData=null;\n\nconst maxSalary = 1000000000;\nconst englishLevels = [\n  'Ninguno',\n  'Básico (puede leer documentación y código en inglés)',\n  'Intermedio (puede pasar una entrevista de programación en ingles cómodamente)',\n  'Avanzado (puede liderar una reunion de varias personas en ingles cómodamente)',\n  'Nativo',\n];\nconst educationTitles = [\n  'Ninguno',\n  'Bachiller',\n  'Técnico',\n  'Tecnólogo',\n  'Pregrado',\n  'Especialista',\n  'Maestría',\n  'Doctorado',\n];\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [salaryMean, setSalaryMean] = useState(0);\n  const [numberOfPeople, setNumberOfPeople] = useState(0);\n  const [salaryData, setSalaryData] = useState(null);\n  const [filteredData, setFilteredData] = useState(null);\n  const [filters, setFilters] = React.useState({\n    exchangeRate: 3000,\n    experience: 0,\n    'english-level': 1,\n    'max-title': 1,\n  });\n  const processData = () => {\n    d3.csv(salaryFile, (d) => {\n      return {\n        currency: d['currency'],\n        'main-programming-language': d['main-programming-language'],\n        'company-type': d['company-type'].replace('empresa', ''),\n        position: d['position'],\n        workmode: d['workmode'],\n        'min-experience': +d['min-experience'],\n        'max-experience': +d['max-experience'],\n        'english-level': +d['english-level'],\n        'max-title': +d['max-title'],\n        'income-in-currency': +d['income-in-currency'],\n      };\n    })\n      .then((csv) => {\n        console.log(csv);\n        setSalaryData(csv);\n        setLoading(false);\n      })\n      .catch((error) => {\n        // handle error\n      });\n  };\n\n  const updateChart = (name, value) => {\n    setFilters((prevState) => ({\n      ...prevState,\n      [name]: value,\n    }));\n  };\n\n  useEffect(() => {\n    processData(setSalaryData, setLoading);\n  }, []);\n\n  useEffect(() => {\n    if (salaryData) {\n      let newSalaryData = salaryData.map((d) => {\n        d['income-cop'] =\n          d['currency'] === 'Pesos'\n            ? d['income-in-currency'] / 1e6\n            : (d['income-in-currency'] * filters.exchangeRate) / 1e6;\n        return d;\n      });\n\n      newSalaryData = newSalaryData.filter(\n        (d) =>\n          d['income-cop'] <= maxSalary &&\n          filters.experience >= d['min-experience'] &&\n          filters.experience <= d['max-experience'] &&\n          filters['english-level'] === d['english-level'] &&\n          filters['max-title'] === d['max-title']\n      );\n\n      setFilteredData(newSalaryData);\n      setSalaryMean(\n        Math.round(d3.mean(newSalaryData, (d) => d['income-cop']) * 1000) / 1000\n      );\n      setNumberOfPeople(newSalaryData.length);\n    }\n  }, [filters]);\n\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography className=\"title\" variant=\"h6\">\n            Visualización de Salarios de Desarrolladores Colombianos 2021\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <h3>\n        Hecho por Jaime García. Datos: Encuesta de Colombia Dev 2021 (1,188\n        personas)\n      </h3>\n\n      {!loading && (\n        <Box>\n          <br />\n          <Grid container spacing={3}>\n            <Grid item xs={12} md={4}>\n              <b>¿Qué tasa de conversión de dólar deseas utilizar?</b>\n              <Slider\n                variable=\"exchangeRate\"\n                updateChart={updateChart}\n                min={3500}\n                defaultValue={3760}\n                max={4500}\n                step={10}\n              />\n              <b>¿Cuántos años de experiencia tienes?</b>\n              <Slider\n                variable=\"experience\"\n                updateChart={updateChart}\n                min={0}\n                defaultValue={5}\n                max={15}\n                step={1}\n              />\n              <b>¿Cuál es tu nivel de ingles?</b>\n              <Slider\n                variable=\"english-level\"\n                updateChart={updateChart}\n                min={0}\n                defaultValue={2}\n                max={4}\n                step={1}\n                ordinalScale={englishLevels}\n              />\n              <b>¿Cuál es tu máximo nivel de formación?</b>\n              <Slider\n                variable=\"max-title\"\n                updateChart={updateChart}\n                min={0}\n                defaultValue={4}\n                max={7}\n                step={1}\n                ordinalScale={educationTitles}\n              />\n            </Grid>\n            <Grid item xs={12} md={8}>\n              <Grid container spacing={3}>\n                <Grid item xs={12}>\n                  <b>\n                    <span>\n                      Hay {numberOfPeople} persona\n                      {numberOfPeople !== 1 && <span>s</span>} de la comunidad\n                      con un perfil parecido al tuyo\n                    </span>\n                    {numberOfPeople > 0 && (\n                      <span> y ganan en promedio el equivalente a</span>\n                    )}\n                  </b>\n                  <h2>\n                    {numberOfPeople > 0 && (\n                      <React.Fragment>\n                        <span>\n                          {' '}\n                          <h2>\n                            <span className=\"salary-value\">\n                              {d3.format('($,.1f')(salaryMean)} Millones de\n                              pesos al año\n                            </span>\n                          </h2>\n                        </span>\n                        <span className=\"salary-value\">\n                          {' '}\n                          <span>\n                            {d3.format('($,.1f')(salaryMean / 12)} Millones\n                          </span>{' '}\n                          de pesos mensuales\n                        </span>\n                      </React.Fragment>\n                    )}\n                  </h2>\n                </Grid>\n                {numberOfPeople > 0 && filteredData && (\n                  <Grid item xs={12} md={6}>\n                    <b>\n                      Promedios por Lenguaje de Programación (Millones de pesos)\n                    </b>\n                    <Bar\n                      x=\"main-programming-language\"\n                      y=\"income-cop\"\n                      margin={{ top: 1.5, right: 50, bottom: 50, left: 100 }}\n                      height={550}\n                      data={filteredData}\n                    />\n                  </Grid>\n                )}\n\n                {numberOfPeople > 0 && filteredData && (\n                  <Grid item xs={12} md={6}>\n                    <b>Promedios por Tipo de Empresa (Millones de pesos)</b>\n                    <Bar\n                      x=\"company-type\"\n                      y=\"income-cop\"\n                      margin={{ top: 1.5, right: 50, bottom: 50, left: 220 }}\n                      height={225}\n                      data={filteredData}\n                    />\n                    <b>Promedios por Modo de Trabajo (Millones de pesos)</b>\n                    <Bar\n                      x=\"workmode\"\n                      y=\"income-cop\"\n                      margin={{ top: 1.5, right: 50, bottom: 50, left: 100 }}\n                      height={325}\n                      data={filteredData}\n                    />\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}